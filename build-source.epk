
#!/bin/bash
#@(#)Build EIS Configuration Management

prefix=/opt/eis_cm
build=/tmp/eis/build-puppet-src
PKGDIR=/tmp/eis
PUPPET_SANDBOX=/tmp/eis/puppet-sandbox.$$

GEMS_SANDBOX=/tmp/eis/gems-sandbox.$$
RUBY_SANDBOX=/tmp/eis/ruby-sandbox.$$
packagerel=1

test -d "$prefix" || mkdir -p $prefix
test -d "$build" || mkdir -p $build

augeas_version=1.0.0
#Orig augeas_source=http://augeas.net/download/augeas-$augeas_version.tar.gz
augeas_source=http://deploy.epk.ericsson.se/cm/src/1.3.2/augeas-$augeas_version.tar.gz

#ruby_version=1.9.3-p429
ruby_version=2.0.0-p195
ruby_version=1.8.7-p358
#Orig ruby_source=http://ftp.ruby-lang.org/pub/ruby/1.8/ruby-$ruby_version.tar.gz
ruby_source=http://deploy.epk.ericsson.se/cm/src/1.3.2/ruby-$ruby_version.tar.gz

ruby_shadow_version=2.1.4
#Orig ruby_shadow_source=http://deploy.epk.ericsson.se/cm/src/ruby-shadow-${ruby_shadow_version}.tar.gz
ruby_shadow_source=http://deploy.epk.ericsson.se/cm/src/1.3.2/ruby-shadow-${ruby_shadow_version}.tar.gz

zlib_version=1.2.8
#Orig zlib_source=http://dfn.dl.sourceforge.net/project/libpng/zlib/$zlib_version/zlib-$zlib_version.tar.gz
zlib_source=http://deploy.epk.ericsson.se/cm/src/1.3.2/zlib-$zlib_version.tar.gz

openssl_version=1.0.1e
#Orig openssl_source=http://www.openssl.org/source/openssl-$openssl_version.tar.gz
openssl_source=http://deploy.epk.ericsson.se/cm/src/1.3.2/openssl-$openssl_version.tar.gz

rubyaugeas_version=0.4.1
#Orig rubyaugeas_source=http://augeas.net/download/ruby/ruby-augeas-${rubyaugeas_version}.tgz
rubyaugeas_source=http://deploy.epk.ericsson.se/cm/src/1.3.2/ruby-augeas-${rubyaugeas_version}.tgz

puppet_version=3.2.1
#Orig puppet_source=http://puppetlabs.com/downloads/puppet/puppet-$puppet_version.tar.gz
puppet_source=http://deploy.epk.ericsson.se/cm/src/1.3.2/puppet-$puppet_version.tar.gz

yaml_version=0.1.4
#Orig yaml_source=http://pyyaml.org/download/libyaml/yaml-$yaml_version.tar.gz
yaml_source=http://deploy.epk.ericsson.se/cm/src/1.3.2/yaml-$yaml_version.tar.gz

facter_version=1.7.1
#Orig facter_source=http://puppetlabs.com/downloads/facter/facter-$facter_version.tar.gz
facter_source=http://deploy.epk.ericsson.se/cm/src/1.3.2/facter-$facter_version.tar.gz

#rubygems_version=1.8.24
#rubygems_source=http://production.cf.rubygems.org/rubygems/rubygems-$rubygems_version.tgz
#rubygems_source=http://deploy.epk.ericsson.se/cm/src/gems-$rubygems_version.tgz

get_source () {
  cd $build
  typeset sw=$1
  typeset srcdir=`eval echo ${sw}-'$'${sw}_version`
  typeset url=`eval echo '$'${sw}_source`
  test -d $srcdir && return
  test -f $srcdir.tar.gz || wget -O $srcdir.tar.gz $url --no-proxy
  gzip -dc $srcdir.tar.gz | tar xf -
}



#h #ok get_source zlib
#h get_source openssl
#h get_source yaml
#h      #get_source augeas
#h      #get_source rubyaugeas
#h      #mv ruby-augeas-$rubyaugeas_version rubyaugeas-$rubyaugeas_version
#h get_source ruby
#h #get_source facter
#h #get_source puppet
#h get_source ruby_shadow

linux_dist () {
  if [ -f /etc/redhat-release ] ; then
    typeset dist="rhel"
    typeset ver=$(sed 's/^[^0-9]*\([0-9]*\).*$/\1/' /etc/redhat-release)
  else if [ -f /etc/SuSE-release ] ; then
      typeset dist="suse"
      typeset ver=$(sed -n '1s/^[^0-9]*\([0-9]*\).*$/\1/p' /etc/SuSE-release)
  else if [ -f /etc/debian_version ] ; then
      typeset dist="debian_"
      typeset ver=$(sed -n '1s/^\([^\/]*\)\(\/sid\)*/\1/p' /etc/debian_version)
  fi ; fi ; fi

  if [ -z "$dist" -o -z "$ver" ] ; then
    echo Unsupported linux dist $dist $ver 1>&2
    exit 1
  fi
  echo $dist$ver
  return
}

rootdo () {
if [ $UID = 0 ] ; then
$*
else
sudo $*
fi
}

# zlib
build_zlib() {
 echo Building zlib
 cd $build
 cd zlib-$zlib_version
 make clean
 case `uname -s` in
   'SunOS')
      case `uname -r` in
        '5.8' | '5.9')
           export PATH=/usr/sbin:/usr/bin:/app/gcc/3.4.6/bin:/opt/csw/bin:/usr/ccs/bin
           export LDFLAGS="-L/lib -L/app/gcc/3.4.6/lib -static-libgcc"
           ./configure --prefix=$prefix
           make && make test && make install
        ;;
        *)
           export PATH=/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
           export LDFLAGS=-L/lib -static-libgcc
           ./configure --prefix=$prefix
           gmake && gmake test && gmake install
        ;;
     esac
   ;;
   'HP-UX')
     CC=/usr/local/bin/gcc
     export CC
     CFLAGS="-O2 -g -pthread -mlp64 -w -pipe -Wall"
     ./configure --prefix=$prefix
     export CFLAGS
     make && make test && make install
   ;;
   'Linux')
      ./configure --prefix=$prefix
      make && make test && sudo make install
      make install DESTDIR=$PUPPET_SANDBOX
   ;;
   *)
     echo Unsupported OS `uname -s`
     exit 1
   ;;
 esac
}

# openssl
build_openssl() {
## NOTE! Probably need "shared" for Sol and HPUX below
 echo Building openssl
 cd $build
 cd openssl-$openssl_version
 make clean
 case `uname -s` in
   'SunOS')
      case `uname -r` in
        '5.8' | '5.9')
           export PATH=/usr/sbin:/usr/bin:/app/gcc/3.4.6/bin:/opt/csw/bin:/usr/ccs/bin
           export CFLAGS="-fPIC"
           perl  Configure solaris-sparcv9-gcc --prefix=$prefix shared zlib-dynamic -L/lib -L/app/gcc/3.4.6/lib -static-libgcc 
           make && make test && make install
        ;;
        *)
           export PATH=/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
           export CFLAGS="-fPIC"
#           perl  Configure solaris-sparcv9-gcc --prefix=$prefix shared zlib-dynamic -L/lib -static-libgcc 
           perl  Configure solaris-x86-gcc --prefix=$prefix shared zlib-dynamic -L/lib -static-libgcc 
           gmake && gmake test && gmake install
        ;;
     esac
   ;;
   'HP-UX')
     CC=/usr/local/bin/gcc
     export CC
     CFLAGS="-O2 -g -pthread -mlp64 -w -pipe -Wall"
     export CFLAGS
     perl Configure hpux64-ia64-gcc --prefix=$prefix
     make && make test && make install   
   ;;
   'Linux')
     ./config --prefix=$prefix -fPIC shared
     make && make test && sudo make install
     make install INSTALL_PREFIX=$PUPPET_SANDBOX  
   ;;
   *)
     echo Unsupported OS `uname -s`
     exit 1
   ;;
 esac
}
# yaml
build_yaml() {
## NOTE! Probably need "shared" for Sol and HPUX below
 echo Building yaml
 cd $build
 cd yaml-$yaml_version
 make clean
 case `uname -s` in
   'SunOS')
      case `uname -r` in
        '5.8' | '5.9')
           export PATH=/usr/sbin:/usr/bin:/app/gcc/3.4.6/bin:/opt/csw/bin:/usr/ccs/bin
           export CFLAGS="-fPIC"
           ./configure --prefix=$prefix
           make && make install
        ;;
        *)
           export PATH=/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
           export CFLAGS="-fPIC"
           ./configure --prefix=$prefix
           gmake && gmake install
        ;;
     esac
   ;;
   'HP-UX')
     CC=/usr/local/bin/gcc
     export CC
     CFLAGS="-O2 -g -pthread -mlp64 -w -pipe -Wall"
     export CFLAGS
     ./configure --prefix=$prefix
     make && make install   
   ;;
   'Linux')
     ./configure --prefix=$prefix
     make && make install DESTDIR=$PUPPET_SANDBOX
     sudo make install   
   ;;
   *)
     echo Unsupported OS `uname -s`
     exit 1
   ;;
 esac
}

# Augeas
build_augeas() {
## NOTE! Probably need "shared" for Sol and HPUX below
 echo Building yaml
 cd $build
 cd augeas-$augeas_version
 make clean
 case `uname -s` in
   'SunOS')
     PATH=/usr/sfw/bin:/usr/ccs/bin:$PATH
     export PATH
     CFLAGS="-fPIC"
     export CFLAGS
     ./configure --prefix=$prefix
     gmake && gmake install
   ;;
   'HP-UX')
     CC=/usr/local/bin/gcc
     export CC
     CFLAGS="-O2 -g -pthread -mlp64 -w -pipe -Wall"
     export CFLAGS
     ./configure --prefix=$prefix
     make && make install   
   ;;
   'Linux')
     ./configure --prefix=$prefix
     make && make install DESTDIR=$PUPPET_SANDBOX
     sudo make install   
   ;;
   *)
     echo Unsupported OS `uname -s`
     exit 1
   ;;
 esac
}
# ruby
build_ruby() {
 echo Building ruby
 cd $build
 cd ruby-$ruby_version
 export PATH=/usr/ccs/bin:$PATH
 make clean
 case `uname -s` in
   'SunOS')
      case `uname -r` in
        '5.8' | '5.9')
           export PATH=/usr/sbin:/usr/bin:/app/gcc/3.4.6/bin:/opt/csw/bin:/usr/ccs/bin
           export CPPFLAGS="-I$prefix/include"
           export LDFLAGS="-L$prefix/lib -Wl,-R,/opt/eis_cm/lib -static-libgcc"
           echo "zlib" >> ext/Setup
           echo "iconv" >> ext/Setup
           echo "openssl" >> ext/Setup
           ./configure --prefix=$prefix
           make && make test && make install
        ;;
        *)
           export PATH=/usr/sfw/bin:/usr/ccs/bin:/usr/sbin:/usr/bin
           export CPPFLAGS="-I/usr/sfw/include -I$prefix/include"
           #export LDFLAGS="-L$prefix/lib"
           export LDFLAGS="-L$prefix/lib -Wl,-R,/opt/eis_cm/lib -static-libgcc"
#          echo "zlib" >> ext/Setup
#          echo "iconv" >> ext/Setup
#          echo "openssl" >> ext/Setup
           ./configure --prefix=$prefix --with-openssl-dir=$prefix
           gmake && gmake test && gmake install
        ;;
     esac
   ;;
   'HP-UX')
     PATH=/usr/local/bin:$PATH
     export PATH
     CC=/usr/local/bin/gcc
     export CC
     CFLAGS="-O2 -g -pthread -mlp64 -w -pipe -Wall"
     export CFLAGS
     
     CPPFLAGS "-DHAVE_HMAC_CTX_COPY -DHAVE_EVP_CHIPER_CTX_COPY -I/opt/eis_cm/include"
     export CPPFLAGS
     LDFLAGS="-L$prefix/lib"
     export LDFLAGS
     ./configure --prefix=$prefix --with-gcc --enable-pthread --enable-shared --disable-rpath
     make && make test && make install
     break
   ;;
   'Linux')
     CPPFLAGS="-I$prefix/include -fPIC"
     export CPPFLAGS
     LDFLAGS="-L$prefix/lib -Wl,-rpath=/opt/eis_cm/lib"
     export LDFLAGS
     ./configure --prefix=$prefix  
     ## not working ./configure --prefix=$prefix --with-openssl=$prefix/lib --w ith-openssl-includes=$prefix/include --with-zlib=$prefix/lib --with-zlib-include s=$prefix/include
     sudo rm .installed.list
     make && make test && make install DESTDIR=$PUPPET_SANDBOX
     sudo make install
     cd ext/openssl
     /opt/eis_cm/bin/ruby extconf.rb
     sudo rm .installed.list
     make && make install DESTDIR=$PUPPET_SANDBOX
     sudo make install
     break
   ;;
   *)
     echo To be implemented
     exit 1
     break
   ;;
 esac
}

verify_ruby () {

 echo Testing ruby openssl
 $prefix/bin/ruby -ropenssl -e 'puts :OK'
 echo Testing ruby zlib
 $prefix/bin/ruby -rzlib -e 'puts :OK'
 echo Testing ruby md5
 $prefix/bin/ruby -rmd5 -e 'puts :OK'
 echo Tetsing ruby sha1
 $prefix/bin/ruby -rsha1 -e 'puts :OK'
 echo End test
}

install_ruby_shadow () {
 echo Installing ruby shadow
 case `uname -s` in
   'SunOS')
    echo "To be implemented if needed, currently not needed" 
   ;;
   'HP-UX')
    echo "To be implemented if needed, currently not needed" 
   ;;
   'Linux')
        cd $build
        echo cd ruby-shadow-$ruby_shadow_version
        cd ruby-shadow-$ruby_shadow_version
        /opt/eis_cm/bin/ruby extconf.rb 
        make 
        make install
        make install DESTDIR=$PUPPET_SANDBOX
   ;;
   *)
     echo Unsupported OS `uname -s`
   ;;
esac
}



install_rubyaugeas() {
 echo Installing Ruby-Augeas
 cd $build
 cd rubyaugeas-$rubyaugeas_version
 exit 1
 /opt/eis_cm/bin/ruby --destdir=$PUPPET_SANDBOX
 #sudo /opt/eis_cm/bin/ruby install.rb
}
 
 
#  facter
install_facter() {
 echo Installing Facter
 cd $build
 cd facter-$facter_version
 /opt/eis_cm/bin/ruby install.rb --destdir=$PUPPET_SANDBOX
 rootdo /opt/eis_cm/bin/ruby install.rb
}

#  puppet
install_puppet() {
 echo Installing Puppet
 cd $build
 cd puppet-$puppet_version
 /opt/eis_cm/bin/ruby install.rb --destdir=$PUPPET_SANDBOX
 rootdo /opt/eis_cm/bin/ruby install.rb
}

#  gems
install_rubygems() {
 echo Installing Gems
 cd $build
 cd rubygems-$rubygems_version
 /opt/eis_cm/bin/ruby setup.rb --destdir=$GEMS_SANDBOX
 sudo /opt/eis_cm/bin/ruby setup.rb
}

ruby_rpm () {
typeset SPEC=/var/tmp/eisruby.spec
typeset rubyver=${ruby_version%%-*}
rm -f $SPEC
cat << EOSPEC >> $SPEC
Name: eis_puppet-ruby
Summary: Ruby for the EIS puppet
Version: ${rubyver}
Release: ${packagerel}_$DISTVER
License: GPL
Group: Applications/System
Buildroot: $PUPPET_SANDBOX

%description
This is ruby plus zlib, openssl and yaml

#%post
#remove not allowed ln -s /opt/puppet/bin/ruby /usr/bin/ruby

%files
/opt/eis_cm
EOSPEC
rpmbuild --define "_rpmdir $PKGDIR" --buildroot=$PUPPET_SANDBOX -bb $SPEC
}

ruby_deb () {
typeset CTRL=$PUPPET_SANDBOX/DEBIAN/control
typeset rubyver=${ruby_version%%-*}
mkdir -p $PUPPET_SANDBOX/DEBIAN
cat << EOSPEC > $CTRL
Package: eis-puppet-ruby
Version: ${rubyver}-${packagerel}
Architecture: $architecture
Priority: optional
Section: base
Depends:
Maintainer: Ericsson internal <root@ericsson.se>
Description: This is ruby plus zlib, openssl and yaml
EOSPEC
cd $PUPPET_SANDBOX/..
fakeroot dpkg-deb --build $(basename $PUPPET_SANDBOX)
mv $(basename $PUPPET_SANDBOX).deb /var/tmp/eis-puppet-ruby-${rubyver}-${packagerel}${DISTVER#debian}.`uname -i`.deb
}

puppet_rpm () {
typeset SPEC=/var/tmp/eispuppet.spec
typeset puppetver=${puppet_version%%-*}
rm -f $SPEC
rm -r $PUPPET_SANDBOX/etc/puppet/auth.conf
cat << EOSPEC >> $SPEC
Name: eis_cm
URL: http://puppetlabs.com/puppet/puppet-open-source/
Summary: EIS puppet Automated administrative engine for *nix systems
Version: ${puppetver}
Release: ${packagerel}_$DISTVER
License: GPL
Group: Applications/System
Buildroot: $PUPPET_SANDBOX

%description
This is puppet plus facter

%post
groupadd puppet
useradd -r -d /var/lib/puppet -M -c "Puppet daemon" -s /bin/false -g puppet puppet

%files
/opt/eis_cm
EOSPEC
rpmbuild --define "_rpmdir $PKGDIR"  --buildroot=$PUPPET_SANDBOX -bb $SPEC
}

puppet_deb () {
typeset CTRL=$PUPPET_SANDBOX/DEBIAN/control
typeset puppetver=${puppet_version%%-*}
mkdir -p $PUPPET_SANDBOX/DEBIAN
cat << EOSPEC > $CTRL
Package: eis-cm
Version: ${puppetver}-${packagerel}
Architecture: $architecture
Priority: optional
Section: base
Maintainer: Ericsson internal <root@ericsson.se>
Description: This is ruby, puppet and facter
EOSPEC
cd $PUPPET_SANDBOX/..
fakeroot dpkg-deb --build $(basename $PUPPET_SANDBOX)
mv $(basename $PUPPET_SANDBOX).deb /var/tmp/eis_cm-${puppetver}-${packagerel}${DISTVER#debian}.`uname -i`.deb
}

rubygems_rpm () {
typeset SPEC=/var/tmp/eisrubygems.spec
typeset gemsver=${rubygems_version%%-*}
rm -f $SPEC
cat << EOSPEC >> $SPEC
Name: eis_cm-rubygems
Summary: EIS puppet rubygems
Version: ${gemsver}
Release: ${packagerel}_$DISTVER
License: GPL
Group: Applications/System
Buildroot: $GEMS_SANDBOX

%description
This is rubygems for the EIS ruby

#%post
#remove not allowed  ln -sf /opt/puppet/bin/ruby /usr/bin/ruby

%files
/opt/eis_cm
EOSPEC
rpmbuild --define "_rpmdir $PKGDIR" --target=noarch --buildroot=$GEMS_SANDBOX -bb $SPEC
}

rubygems_deb () {
typeset CTRL=$GEMS_SANDBOX/DEBIAN/control
typeset gemsver=${rubygems_version%%-*}
mkdir -p $GEMS_SANDBOX/DEBIAN
cat << EOSPEC > $CTRL
Package: eis-cm-rubygems
Version: ${gemsver}-${packagerel}
Architecture: all
Priority: optional
Section: base
Depends: eis-cm
Maintainer: Ericsson internal <root@ericsson.se>
Description: This is rubygems so passenger etc can be installed
EOSPEC
#cat << EOPOST > $GEMS_SANDBOX/DEBIAN/postinstall
##!/bin/sh
#ln -sf /opt/puppet/bin/ruby /usr/bin/ruby
#EOPOST
cd $GEMS_SANDBOX/..
fakeroot dpkg-deb --build $(basename $GEMS_SANDBOX)
mv $(basename $GEMS_SANDBOX).deb /var/tmp/eis_cm-rubygems-${gemsver}-${packagerel}${DISTVER#debian}.noarch.deb
}

puppet_pkg () {
typeset PKGROOT=/var/tmp/eis_cm-pkgroot

mkdir $PKGROOT
cd /
find /opt/eis_cm | cpio -pmd $PKGROOT
platform=`uname -p`
find $PKGROOT | sed s,$PKGROOT,,| pkgproto > $PKGROOT/cm.proto

cat << EOP >> $PKGROOT/cm.proto
i checkinstall
i pkginfo
i postinstall
EOP

cat << EOT > $PKGROOT/checkinstall
#!/bin/sh

expected_platform="$platform"
platform=`uname -p`
if [ \${platform} != \${expected_platform} ]; then
        echo "This package must be installed on \${expected_platform}"
        exit
fi
exit 0
EOT

cat << EOT2 > $PKGROOT/pkginfo
PKG="EIScm"
NAME="cm"
VERSION="2.7.14"
ARCH="$platform"
CLASSES="none"
CATEGORY="tools"
VENDOR="EIS"
PSTAMP="19thSep2012"
EMAIL="tor-ake.fransson@ericsson.com"
ISTATES="S s 1 2 3"
RSTATES="S s 1 2 3"
BASEDIR="/"
EOT2

# needed for Solaris 8 & 9
cat << EOT3 > $PKGROOT/postinstall
#!/bin/bash
mkdir -p /var/lib
EOT3

cd $PKGROOT
mkdir /var/tmp/eis 2>/dev/null
pkgmk -o -r / -d /var/tmp/eis -f cm.proto
cd /var/tmp/eis
solvers=$(uname -r)
solvers=${solvers#5.}
pkgtrans -s `pwd` /var/tmp/eis_cm-2.7.14-sol$solvers-$platform EIScm
echo Wrote /var/tmp/eis_cm-2.7.14-sol$solvers-$platform
rm -rf /var/tmp/eis/EIScm
rmdir /var/tmp/eis 2>/dev/null

if [ -n "$PKGROOT" ] ; then
rm -rf $PKGROOT
fi

}

make_pkg () {
  typeset what=$1
  case `uname -s` in
   'SunOS')
     ${what}_pkg
   ;;
   'HP-UX')
     echo To be implemented
     exit 1
   ;;
   'Linux')
     architecture=`uname -i`
     if [ `uname -s` = 'Linux' ] ; then
       DISTVER=`linux_dist`
     fi
     if [ "${DISTVER#debian}" != "$DISTVER" ] ; then
        if [ "$architecture" = x86_64 ] ; then
          architecture=amd64
        fi
        ${what}_deb
     else if [ "${DISTVER#suse}" != "$DISTVER" -o "${DISTVER#rhel}" != "$DISTVER" ] ; then
        ${what}_rpm
     else
        echo do not know how to package for $DISTVER
        exit 1
     fi ; fi
   ;;
   *)
     echo To be implemented
     exit 1
   ;;
 esac
}

if [ -z "$1" ] ; then
 do_zlib=0
 do_openssl=0
 do_yaml=0
# do_augeas=0
 do_ruby=1
 do_ruby_shadow=0
# do_rubyaugeas=0
 do_facter=1
 do_puppet=0
 do_verify=0
 do_ruby_pkg=0
 do_puppet_pkg=0
else
 do_zlib=0
 do_openssl=0
 do_yaml=0
 do_augeas=0
 do_ruby=0
 do_ruby_shadow=0
 do_rubyaugeas=0
 do_facter=0
 do_puppet=0
 do_verify=0
 do_ruby_pkg=0
 do_puppet_pkg=0
 do_rubygems=0
 while [ -n "$1" ] ; do
   eval "do_$1=1"
   shift
 done
fi
if [ $do_zlib -eq 1    ] ; then get_source zlib; build_zlib      ; fi
if [ $do_openssl -eq 1 ] ; then get_source openssl; build_openssl   ; fi
if [ $do_yaml -eq 1    ] ; then get_source yaml; build_yaml      ; fi
   #? if [ $do_augeas -eq 1    ] ; then get_source augeas;build_augeas      ; fi
if [ $do_ruby -eq 1    ] ; then get_source ruby; build_ruby      ; fi
if [ $do_verify -eq 1  ] ; then verify_ruby     ; fi
if [ $do_ruby_shadow -eq 1    ] ; then get_source ruby_shadow; install_ruby_shadow     ; fi
if [ $do_rubyaugeas -eq 1  ] ; then get_source rubyaugeas; install_rubyaugeas     ; fi
if [ $do_facter -eq 1  ] ; then get_source facter;install_facter  ; fi
if [ $do_puppet -eq 1  ] ; then get_source puppet;install_puppet  ; fi
   #if [ "$do_ruby_pkg" = 1  ] ; then make_pkg ruby ; fi
#if [ "$do_puppet_pkg" = 1  ] ; then make_pkg puppet ; fi
#if [ "$do_rubygems" = 1 ] ; then get_source rubygems ; install_rubygems ; make_pkg rubygems ; fi


